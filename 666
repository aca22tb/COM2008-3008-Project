Exception in thread "AWT-EventQueue-0" java.lang.RuntimeException: Uncompilable code - 无法将类 com.mycompany.loginapp.Cart中的构造器 Cart应用到给定类型;
  需要: java.util.Map<java.lang.String,java.lang.Integer>,java.lang.String
  找到:    java.util.Map<java.lang.String,java.lang.Integer>
  原因: 实际参数列表和形式参数列表长度不同
package com.mycompany.loginapp;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;

public class Cart extends JFrame {

    private DefaultTableModel model;
    private JTable table;
    private JButton deleteButton, confirmOrderButton;
    private Map<String, Integer> shoppingCart;
    private String userRole; // Add user role information

    public Cart(Map<String, Integer> shoppingCart, String userRole) {
        setTitle("Shopping Cart");
        setSize(800, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.shoppingCart = shoppingCart;
        this.userRole = userRole; // Set user role

        // 初始化表格模型
        model = new DefaultTableModel();
        model.addColumn("Product");
        model.addColumn("Quantity");

        // 初始化表格
        table = new JTable(model);

        // 创建滚动窗格
        JScrollPane scrollPane = new JScrollPane(table);

        // 初始化按钮
        deleteButton = createStyledButton("Delete from Cart");
        confirmOrderButton = createStyledButton("Confirm Order");

        // 添加按钮监听器
        deleteButton.addActionListener(e -> deleteFromCart());
        confirmOrderButton.addActionListener(e -> confirmOrder());

        // 创建底部面板
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.add(deleteButton);
        bottomPanel.add(confirmOrderButton);

        // 设置布局
        setLayout(new BorderLayout());
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        // 显示购物车内容
        displayShoppingCart();

        setVisible(true);
    }

    // 创建样式化按钮
    private JButton createStyledButton(String buttonText) {
        JButton button = new JButton(buttonText);
        button.setPreferredSize(new Dimension(150, 40));
        button.setFont(new Font("Arial", Font.PLAIN, 16));
        return button;
    }

    // 显示购物车内容
    private void displayShoppingCart() {
        for (Map.Entry<String, Integer> entry : shoppingCart.entrySet()) {
            String product = entry.getKey();
            int quantity = entry.getValue();
            Object[] rowData = {product, quantity};
            model.addRow(rowData);
        }
    }

    // 从购物车中删除产品
    private void deleteFromCart() {
        int selectedRow = table.getSelectedRow();

        if (selectedRow != -1) {
            // 获取选定行的产品信息
            String product = (String) table.getValueAt(selectedRow, 0);

            // 从购物车中移除该产品
            shoppingCart.remove(product);

            // 更新表格显示
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product from the cart.");
        }
    }

    // 确认订单
    private void confirmOrder() {
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to confirm this order?", "Confirm Order", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            // 提示用户输入银行信息
            showBankDetailsDialog();
        }
    }

    // 弹出对话框以输入银行信息
    private void showBankDetailsDialog() {
        JPanel panel = new JPanel(new GridLayout(6, 2));

        JTextField cardHolderNameField = new JTextField();
        JTextField cardNumberField = new JTextField();
        JTextField cvvField = new JTextField();
        JTextField expiryDateField = new JTextField();

        panel.add(new JLabel("Cardholder Name:"));
        panel.add(cardHolderNameField);
        panel.add(new JLabel("Card Number:"));
        panel.add(cardNumberField);
        panel.add(new JLabel("CVV:"));
        panel.add(cvvField);
        panel.add(new JLabel("Expiry Date:"));
        panel.add(expiryDateField);

        int result = JOptionPane.showConfirmDialog(this, panel, "Enter Bank Details", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            // 获取用户输入的银行信息
            String cardHolderName = cardHolderNameField.getText();
            String cardNumber = cardNumberField.getText();
            String cvv = cvvField.getText();
            String expiryDate = expiryDateField.getText();

            // 将银行信息存储到数据库
            saveBankDetailsToDatabase(cardHolderName, cardNumber, cvv, expiryDate);
        }
    }

    // 将银行信息存储到数据库
    private void saveBankDetailsToDatabase(String cardHolderName, String cardNumber, String cvv, String expiryDate) {
        // 数据库连接参数
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        String url = "jdbc:mysql://stusql.dcs.shef.ac.uk/team056";
        String username = "team056";
        String password = "ohr4Kahbi";

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            // 根据用户角色确定要插入的表
            String tableName;
            if ("customer".equals(userRole)) {
                tableName = "customer_bank_details";
            } else if ("staff".equals(userRole)) {
                tableName = "staff_bank_details";
            } else if ("manager".equals(userRole)) {
                tableName = "manager_bank_details";
            } else {
                // 未知用户角色
                throw new IllegalStateException("Unknown user role: " + userRole);
            }

            // 插入银行信息
            String query = "INSERT INTO " + tableName + " (card_holder_name, card_number, cvv, expiry_date) VALUES (?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, cardHolderName);
                preparedStatement.setString(2, cardNumber);
                preparedStatement.setString(3, cvv);
                preparedStatement.setString(4, expiryDate);

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Bank details saved successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to save bank details. No rows affected.");
                }
            }
        } catch (SQLException e) {
            System.err.println("SQLException: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // For testing purposes
        SwingUtilities.invokeLater(() -> {
            Map<String, Integer> testCart = Map.of("Product A", 2, "Product B", 1, "Product C", 3);
            new Cart(testCart, "customer");
        });
    }
}
