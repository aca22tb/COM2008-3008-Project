package com.mycompany.loginapp;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

public class Cart extends JFrame {

    private DefaultTableModel model;
    private JTable table;
    private JButton deleteButton, confirmOrderButton, returnButton;
    private Map<String, Integer> shoppingCart;
    private String userEmail; // Added field to store the logged-in user's email

    public Cart(String userEmail, Map<String, Integer> shoppingCart) {
        this.userEmail = userEmail; // Set the logged-in user's email
        setTitle("Shopping Cart");
        setSize(800, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.shoppingCart = shoppingCart;

        // Initialize table model
        model = new DefaultTableModel();
        model.addColumn("Brand");
        model.addColumn("Product");
        model.addColumn("Quantity");
        model.addColumn("Price");
        model.addColumn("Total Price");

        // Initialize table
        table = new JTable(model);

        // Create scroll pane
        JScrollPane scrollPane = new JScrollPane(table);

        // Initialize buttons
        deleteButton = createStyledButton("Delete from Cart");
        confirmOrderButton = createStyledButton("Confirm Order");
        returnButton = createStyledButton("Return to Shopping");

        // Add button listeners
        deleteButton.addActionListener(e -> deleteFromCart());
        confirmOrderButton.addActionListener(e -> confirmOrder());
        returnButton.addActionListener(e -> returnToShopping());

        // Create bottom panel
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        bottomPanel.add(deleteButton);
        bottomPanel.add(confirmOrderButton);
        bottomPanel.add(returnButton);

        // Set layout
        setLayout(new BorderLayout());
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        // Display shopping cart content
        displayShoppingCart();

        setVisible(true);
    }

    // Create styled button
    private JButton createStyledButton(String buttonText) {
        JButton button = new JButton(buttonText);
        button.setPreferredSize(new Dimension(150, 40));
        button.setFont(new Font("Arial", Font.PLAIN, 16));
        return button;
    }

    // Display shopping cart content
    private void displayShoppingCart() {
        // Clear table
        model.setRowCount(0);

        for (Map.Entry<String, Integer> entry : shoppingCart.entrySet()) {
            String productCode = entry.getKey();
            int quantity = entry.getValue();

            try {
                Connection connection = DatabaseConnection.getConnection();
                String query = "SELECT brand, name, price FROM products WHERE code = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    preparedStatement.setString(1, productCode);
                    ResultSet resultSet = preparedStatement.executeQuery();

                    if (resultSet.next()) {
                        String brand = resultSet.getString("brand");
                        String name = resultSet.getString("name");
                        double price = resultSet.getDouble("price");

                        Object[] rowData = {brand, name, quantity, price, quantity * price};
                        model.addRow(rowData);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Delete product from the cart
    private void deleteFromCart() {
        int selectedRow = table.getSelectedRow();

        if (selectedRow != -1) {
            // Get product information of the selected row
            String product = (String) table.getValueAt(selectedRow, 1);

            // Remove the product from the cart
            shoppingCart.remove(product);

            // Update table display
            model.removeRow(selectedRow);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product from the cart.");
        }
    }

    // Confirm order
    private void confirmOrder() {
        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to confirm this order?", "Confirm Order", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            // Prompt the user for bank details and complete the order
            showBankDetailsDialog();
        }
    }

    // Show dialog to input bank details
    private void showBankDetailsDialog() {
        JPanel panel = new JPanel(new GridLayout(6, 2));

        JTextField cardHolderNameField = new JTextField();
        JTextField cardNumberField = new JTextField();
        JTextField cvvField = new JTextField();
        JTextField expiryDateField = new JTextField();

        panel.add(new JLabel("Cardholder Name:"));
        panel.add(cardHolderNameField);
        panel.add(new JLabel("Card Number:"));
        panel.add(cardNumberField);
        panel.add(new JLabel("CVV:"));
        panel.add(cvvField);
        panel.add(new JLabel("Expiry Date:"));
        panel.add(expiryDateField);

        int result = JOptionPane.showConfirmDialog(this, panel, "Enter Bank Details", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            // Get user input for bank details
            String cardHolderName = cardHolderNameField.getText();
            String cardNumber = cardNumberField.getText();
            String cvv = cvvField.getText();
            String expiryDate = expiryDateField.getText();

            // Save bank details to the database
            saveBankDetailsToDatabase(cardHolderName, cardNumber, cvv, expiryDate);

            // Display order confirmation information
            JOptionPane.showMessageDialog(this, "Order confirmed! Bank details:\n" +
                    "Cardholder Name: " + cardHolderName + "\n" +
                    "Card Number: " + cardNumber + "\n" +
                    "CVV: " + cvv + "\n" +
                    "Expiry Date: " + expiryDate);
        }
    }

    // Save bank details to the database
    private void saveBankDetailsToDatabase(String cardHolderName, String cardNumber, String cvv, String expiryDate) {
        // Get information of the currently logged-in user
        String userEmail = this.userEmail;

        try (Connection connection = DatabaseConnection.getConnection()) {
            String query = "INSERT INTO bank_details (email, card_holder_name, card_number, cvv, expiry_date) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, userEmail);
                preparedStatement.setString(2, cardHolderName);
                preparedStatement.setString(3, cardNumber);
                preparedStatement.setString(4, cvv);
                preparedStatement.setString(5, expiryDate);
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("Bank details saved successfully. Rows affected: " + rowsAffected);
                } else {
                    System.out.println("Failed to save bank details. No rows affected.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(this, "Order confirmed! Bank details:\n" +
                "Cardholder Name: " + cardHolderName + "\n" +
                "Card Number: " + cardNumber + "\n" +
                "CVV: " + cvv + "\n" +
                "Expiry Date: " + expiryDate);
    }

    // Return to shopping interface
    private void returnToShopping() {
        dispose(); // Close the current interface
    }

    public static void main(String[] args) {
        // For testing purposes
        SwingUtilities.invokeLater(() -> {
            Map<String, Integer> testCart = Map.of("Product A", 2, "Product B", 1, "Product C", 3);
            new Cart("test@example.com", testCart);
        });
    }
}
